var t=Object.defineProperty,e=(e,s,i)=>((e,s,i)=>s in e?t(e,s,{enumerable:!0,configurable:!0,writable:!0,value:i}):e[s]=i)(e,"symbol"!=typeof s?s+"":s,i);import{r as s,g as i}from"./phaser-CLYd3JIB.js";!function(){const t=document.createElement("link").relList;if(!(t&&t.supports&&t.supports("modulepreload"))){for(const t of document.querySelectorAll('link[rel="modulepreload"]'))e(t);new MutationObserver((t=>{for(const s of t)if("childList"===s.type)for(const t of s.addedNodes)"LINK"===t.tagName&&"modulepreload"===t.rel&&e(t)})).observe(document,{childList:!0,subtree:!0})}function e(t){if(t.ep)return;t.ep=!0;const e=function(t){const e={};return t.integrity&&(e.integrity=t.integrity),t.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),"use-credentials"===t.crossOrigin?e.credentials="include":"anonymous"===t.crossOrigin?e.credentials="omit":e.credentials="same-origin",e}(t);fetch(t.href,e)}}();var a=s();const n=i(a);class r extends a.Scene{constructor(){super("Boot")}preload(){this.load.image("background","assets/image.png")}create(){this.scene.start("Preloader")}}class l extends a.Scene{constructor(){super("Game")}create(){this.add.image(200,400,"game_background").setAlpha(.5),this.add.text(200,500,"FIGHT",{fontFamily:"Arial Black",fontSize:32,color:"#ffffff",stroke:"#000000",strokeThickness:4,backgroundColor:"#ff0000",padding:{x:20,y:10}}).setOrigin(.5).setInteractive().on("pointerup",(()=>{this.scene.start("FightScene")}))}}class h extends a.Scene{constructor(){super("GameOver")}create(){this.cameras.main.setBackgroundColor(16711680),this.add.image(512,384,"background").setAlpha(.5),this.add.text(512,384,"Game Over",{fontFamily:"Arial Black",fontSize:64,color:"#ffffff",stroke:"#000000",strokeThickness:8,align:"center"}).setOrigin(.5),this.input.once("pointerdown",(()=>{this.scene.start("MainMenu")}))}}class o extends a.Scene{constructor(){super("MainMenu")}create(){this.add.image(200,400,"background").setScale(.55),this.add.text(200,500,"Start game",{fontFamily:"Arial Black",fontSize:32,color:"#ffffff",stroke:"#000000",strokeThickness:4,backgroundColor:"#ff0000",padding:{x:20,y:10}}).setOrigin(.5).setInteractive().on("pointerup",(()=>{this.scene.start("Game")}))}}class c{constructor(t){e(this,"scene"),this.scene=t}createFighterAnimations(){this.createWizardAnimations(),this.createOrcAnimations()}createAnimationSafely(t,e){this.scene.anims.exists(t)||this.scene.anims.create({key:t,...e})}createWizardAnimations(){this.createAnimationSafely("wizard_combat_idle",{frames:this.scene.anims.generateFrameNumbers("wizard_spellcast",{start:0,end:1}),frameRate:5,repeat:-1}),this.createAnimationSafely("wizard_fireball",{frames:this.scene.anims.generateFrameNumbers("wizard_spellcast",{start:0,end:6}),frameRate:8,repeat:0}),this.createAnimationSafely("wizard_lightning",{frames:this.scene.anims.generateFrameNumbers("wizard_spellcast",{start:0,end:6}),frameRate:10,repeat:0}),this.createAnimationSafely("wizard_ice_spike",{frames:this.scene.anims.generateFrameNumbers("wizard_spellcast",{start:0,end:6}),frameRate:12,repeat:0}),this.createAnimationSafely("wizard_meteor",{frames:this.scene.anims.generateFrameNumbers("wizard_spellcast",{start:0,end:6}),frameRate:6,repeat:0}),this.createAnimationSafely("wizard_shield",{frames:this.scene.anims.generateFrameNumbers("wizard_spellcast",{start:0,end:6}),frameRate:8,repeat:0}),this.createAnimationSafely("wizard_heal",{frames:this.scene.anims.generateFrameNumbers("wizard_spellcast",{start:0,end:6}),frameRate:8,repeat:0})}createOrcAnimations(){this.createAnimationSafely("orc_combat_idle",{frames:this.scene.anims.generateFrameNumbers("orc_combat_idle",{start:4,end:5}),frameRate:5,repeat:-1})}}class g extends a.Scene{constructor(){super("Preloader")}init(){this.add.image(200,400,"background").setAlpha(.5).setScale(.55),this.add.rectangle(512,384,468,32).setStrokeStyle(1,16777215);const t=this.add.rectangle(282,384,4,28,16777215);this.load.on("progress",(e=>{t.width=4+460*e}))}preload(){this.load.setPath("assets"),this.load.image("logo","logo.png"),this.load.image("game_background","bg.png"),["fireball","lightning","ice_spike","meteor","shield","heal"].forEach((t=>{this.load.image(t,`icons/${t}.png`)})),["backslash","climb","combat_idle","emote","halfslash","hurt","idle","jump","run","shoot","sit","slash","spellcast","thrust","walk"].forEach((t=>{this.load.spritesheet(`orc_${t}`,`sprites/orc/standard/${t}.png`,{frameWidth:64,frameHeight:64})})),["backslash","climb","combat_idle","emote","halfslash","hurt","idle","jump","run","shoot","sit","slash","spellcast","thrust","walk"].forEach((t=>{this.load.spritesheet(`zombie_${t}`,`sprites/zombie/standard/${t}.png`,{frameWidth:64,frameHeight:64})})),["backslash","climb","combat_idle","emote","halfslash","hurt","idle","jump","run","shoot","sit","slash","spellcast","thrust","walk"].forEach((t=>{this.load.spritesheet(`wizard_${t}`,`sprites/wizard/standard/${t}.png`,{frameWidth:64,frameHeight:64})}))}create(){new c(this).createFighterAnimations(),this.scene.start("MainMenu")}}let d=class{constructor(t,s,i,a){e(this,"name"),e(this,"maxHealth"),e(this,"currentHealth"),e(this,"x"),e(this,"y"),e(this,"isAlive"),this.name=t,this.maxHealth=s,this.currentHealth=s,this.x=i,this.y=a,this.isAlive=!0}takeDamage(t){return this.currentHealth=Math.max(0,this.currentHealth-t),this.isAlive=this.currentHealth>0,this.isAlive}heal(t){this.currentHealth=Math.min(this.maxHealth,this.currentHealth+t)}moveTo(t,e){this.x=t,this.y=e}getHealthPercentage(){return this.currentHealth/this.maxHealth}};const p={SKILLS:{CAST_TIME_MULTIPLIER:.2,MIN_CAST_TIME:200,MAX_CAST_TIME:1500,FIREBALL:{name:"Fireball",damage:15,cooldown:3e3,keyBinding:"a",animationType:"fireball",skillType:"offensive",targetType:"single",description:"Launches a fiery projectile at the enemy"},LIGHTNING:{name:"Lightning",damage:5,cooldown:500,keyBinding:"s",animationType:"lightning",skillType:"offensive",targetType:"single",description:"Strikes the enemy with lightning from your staff"},ICE_SPIKE:{name:"Ice Spike",damage:12,cooldown:1500,keyBinding:"d",animationType:"ice_spike",skillType:"offensive",targetType:"single",description:"Conjures a sharp ice spike to pierce the enemy"},METEOR:{name:"Meteor",damage:35,cooldown:8e3,keyBinding:"j",animationType:"meteor",skillType:"offensive",targetType:"aoe",description:"Summons a devastating meteor from the sky"},SHIELD:{name:"Shield",damage:0,cooldown:4e3,keyBinding:"k",animationType:"shield",skillType:"defensive",targetType:"single",description:"Creates a magical barrier to protect yourself"},HEAL:{name:"Heal",damage:0,cooldown:6e3,keyBinding:"l",animationType:"heal",skillType:"defensive",targetType:"single",description:"Restores your health with healing magic"}},FIGHTERS:{PLAYER:{name:"Player",maxHealth:100,x:200,y:600},OPPONENT:{name:"Opponent",maxHealth:1e3,x:200,y:200}},UI:{SKILL_BUTTON:{radius:30,scaleOnPress:.9,pressAnimationDuration:100,flashAnimationDuration:300,progressRingThickness:3,progressRingColor:65280,progressRingOffset:2},CASTING_RING:{radius:50,thickness:4,glowOffset:8,glowAlphaMultiplier:.3,baseAlpha:.8,progressAlphaMultiplier:.2},HEALTH_BAR:{width:200,height:20,playerColor:65280,opponentColor:16711680},SKILL_BUTTON_LAYOUT:{circleRadius:120,screenPadding:20,skillSpacing:Math.PI/6,leftStartAngle:-Math.PI/4,rightStartAngle:-Math.PI/2-Math.PI/4}},GAME_STATES:{FIGHTING:"fighting",GAME_OVER:"gameOver"}};class m{constructor(t,s,i,a,n,r="offensive",l="single",h="",o){e(this,"name"),e(this,"damage"),e(this,"cooldown"),e(this,"currentCooldown"),e(this,"castTime"),e(this,"currentCastTime"),e(this,"keyBinding"),e(this,"animationType"),e(this,"skillType"),e(this,"targetType"),e(this,"description"),e(this,"isCasting"),this.name=t,this.damage=s,this.cooldown=i,this.currentCooldown=0,this.keyBinding=a,this.animationType=n,this.skillType=r,this.targetType=l,this.description=h,this.isCasting=!1,this.castTime=o??this.calculateDefaultCastTime(i),this.currentCastTime=0}calculateDefaultCastTime(t){const e=t*p.SKILLS.CAST_TIME_MULTIPLIER;return Math.max(p.SKILLS.MIN_CAST_TIME,Math.min(e,p.SKILLS.MAX_CAST_TIME))}canUse(){return this.currentCooldown<=0&&!this.isCasting}canStartCasting(){return this.currentCooldown<=0}startCasting(){return!!this.canStartCasting()&&(this.isCasting=!0,this.currentCastTime=0,!0)}updateCastTime(t){return!!this.isCasting&&(this.currentCastTime+=t,this.currentCastTime>=this.castTime&&(this.completeCast(),!0))}completeCast(){this.isCasting=!1,this.currentCastTime=0,this.use()}completeCastOnRelease(){return!!this.isCasting&&(this.isCasting=!1,this.currentCastTime=0,this.use())}completeCastWithoutUse(){this.isCasting=!1,this.currentCastTime=0}cancelCast(){this.isCasting=!1,this.currentCastTime=0}getCastProgress(){return this.isCasting?Math.min(this.currentCastTime/this.castTime,1):0}use(){return!!this.canUse()&&(this.currentCooldown=this.cooldown,!0)}update(t){this.currentCooldown>0&&(this.currentCooldown=Math.max(0,this.currentCooldown-t))}getCooldownPercentage(){return this.cooldown>0?this.currentCooldown/this.cooldown:0}}class u{constructor(){e(this,"castingSpells",new Map)}startCasting(t,e){if(!t.canStartCasting()||t.isCasting||this.castingSpells.has(t))return!1;if(t.startCasting()){const s={skill:t,startTime:e,castTime:t.castTime,progress:0};return this.castingSpells.set(t,s),!0}return!1}updateCasting(t,e){for(const[s,i]of this.castingSpells){const t=e-i.startTime;i.progress=Math.min(t/i.castTime,1)}return[]}cancelCasting(t){this.castingSpells.has(t)&&(t.cancelCast(),this.castingSpells.delete(t))}cancelAllCasting(){for(const[t]of this.castingSpells)t.cancelCast();this.castingSpells.clear()}cleanupCompletedSpells(t){for(const e of t)this.castingSpells.has(e)&&this.castingSpells.delete(e)}getCastingSpells(){return Array.from(this.castingSpells.values())}isCasting(t){return this.castingSpells.has(t)}getCastingProgress(t){const e=this.castingSpells.get(t);return e?e.progress:0}hasActiveCasts(){return this.castingSpells.size>0}getActiveCastCount(){return this.castingSpells.size}reset(){this.cancelAllCasting()}completeCastingOnRelease(t){const e=this.castingSpells.get(t);if(!e)return!1;if(e.progress>=1){const e=t.completeCastOnRelease();return e&&this.castingSpells.delete(t),e}return this.cancelCasting(t),!1}}class f{constructor(){e(this,"player"),e(this,"opponent"),e(this,"skills"),e(this,"gameState"),e(this,"lastUpdateTime"),e(this,"lastUsedSkill"),e(this,"castingManager"),this.player=new d(p.FIGHTERS.PLAYER.name,p.FIGHTERS.PLAYER.maxHealth,p.FIGHTERS.PLAYER.x,p.FIGHTERS.PLAYER.y),this.opponent=new d(p.FIGHTERS.OPPONENT.name,p.FIGHTERS.OPPONENT.maxHealth,p.FIGHTERS.OPPONENT.x,p.FIGHTERS.OPPONENT.y),this.skills=this.createSkills(),this.gameState=p.GAME_STATES.FIGHTING,this.lastUpdateTime=0,this.lastUsedSkill=null,this.castingManager=new u}createSkills(){return[p.SKILLS.FIREBALL,p.SKILLS.LIGHTNING,p.SKILLS.ICE_SPIKE,p.SKILLS.METEOR,p.SKILLS.SHIELD,p.SKILLS.HEAL].map((t=>new m(t.name,t.damage,t.cooldown,t.keyBinding,t.animationType,t.skillType,t.targetType,t.description)))}startCastingSkill(t){if(t<0||t>=this.skills.length)return!1;const e=this.skills[t],s=Date.now();return this.castingManager.startCasting(e,s)}cancelCurrentCast(){this.castingManager.cancelAllCasting()}cancelSkillCast(t){if(t<0||t>=this.skills.length)return;const e=this.skills[t];this.castingManager.cancelCasting(e)}useSkill(t){if(t<0||t>=this.skills.length)return!1;const e=this.skills[t];return!!e.use()&&(this.lastUsedSkill=e,this.applySkillEffect(e),!0)}completeCastingOnRelease(t){if(t<0||t>=this.skills.length)return!1;const e=this.skills[t];return!!this.castingManager.completeCastingOnRelease(e)&&(this.lastUsedSkill=e,this.applySkillEffect(e),!0)}applySkillEffect(t){"offensive"===t.skillType?this.opponent.takeDamage(t.damage):"defensive"===t.skillType&&"heal"===t.animationType&&this.player.heal(25),this.opponent.isAlive||(this.gameState=p.GAME_STATES.GAME_OVER)}update(t){this.skills.forEach((e=>e.update(t)));const e=Date.now();this.castingManager.updateCasting(t,e)}getSkills(){return this.skills}getLastUsedSkill(){return this.lastUsedSkill}getCurrentlyCastingSkill(){const t=this.castingManager.getCastingSpells();return t.length>0?t[0].skill:null}getCastingSpells(){return this.castingManager.getCastingSpells()}isCasting(t){return this.castingManager.isCasting(t)}getCastingProgress(t){return this.castingManager.getCastingProgress(t)}clearLastUsedSkill(){this.lastUsedSkill=null}getPlayer(){return this.player}getOpponent(){return this.opponent}getGameState(){return this.gameState}reset(){this.player=new d(p.FIGHTERS.PLAYER.name,p.FIGHTERS.PLAYER.maxHealth,p.FIGHTERS.PLAYER.x,p.FIGHTERS.PLAYER.y),this.opponent=new d(p.FIGHTERS.OPPONENT.name,p.FIGHTERS.OPPONENT.maxHealth,p.FIGHTERS.OPPONENT.x,p.FIGHTERS.OPPONENT.y),this.skills=this.createSkills(),this.gameState=p.GAME_STATES.FIGHTING,this.lastUsedSkill=null,this.castingManager.reset()}}class y{constructor(t){e(this,"scene"),this.scene=t}createExplosion(t,e,s,i=20){const a=this.scene.add.circle(t,e,i,s,.8);this.scene.tweens.add({targets:a,scaleX:2,scaleY:2,alpha:0,duration:400,onComplete:()=>a.destroy()})}}class S extends y{create(t,e,s,i){const a=this.scene.add.circle(t,e,8,16729088);this.scene.tweens.add({targets:a,x:s,y:i,duration:400,onComplete:()=>{this.createExplosion(s,i,16729088),a.destroy()}})}}class k extends y{create(t,e,s,i){const a=this.scene.add.graphics();a.lineStyle(3,65535);const n=this.generateLightningPoints(t,e,s,i);a.strokePoints(n),this.scene.tweens.add({targets:a,alpha:0,duration:300,onComplete:()=>a.destroy()})}generateLightningPoints(t,e,s,i){const a=[];for(let n=0;n<=8;n++){const r=n/8,l=t+(s-t)*r,h=e+(i-e)*r;if(n>0&&n<8){const t=20*(Math.random()-.5);a.push(new Phaser.Geom.Point(l+t,h+t))}else a.push(new Phaser.Geom.Point(l,h))}return a}}class C extends y{create(t,e,s,i){const a=this.scene.add.triangle(t,e,0,-8,-4,8,4,8,65535);this.scene.tweens.add({targets:a,x:s,y:i,duration:600,onComplete:()=>{this.createExplosion(s,i,65535),a.destroy()}})}}class T extends y{create(t,e,s,i){this.createMeteorFall(s,i)}createMeteorFall(t,e){const s=e-300,i=this.scene.add.graphics();i.fillStyle(9127187,1),i.fillCircle(0,0,12),i.fillStyle(16729344,.8),i.fillCircle(0,0,8),i.fillStyle(16737095,.6),i.fillCircle(0,0,4),i.setPosition(t,s);const a=this.scene.add.graphics(),n=e+15;this.scene.tweens.add({targets:i,y:n,duration:800,ease:"Cubic.In",onUpdate:()=>{a.clear(),a.fillStyle(16729344,.3),a.fillCircle(i.x,i.y-20,6),a.fillStyle(16737095,.2),a.fillCircle(i.x,i.y-40,4)},onComplete:()=>{a.destroy(),i.destroy(),this.createMeteorImpact(t,n)}})}createMeteorImpact(t,e){const s=this.scene.add.graphics();s.fillStyle(16729344,1),s.fillCircle(0,0,20),s.setPosition(t,e),this.scene.tweens.add({targets:s,scaleX:1.5,scaleY:1.5,alpha:0,duration:200,onComplete:()=>{s.destroy(),this.createFireExplosion(t,e)}})}createFireExplosion(t,e){const s=this.scene.add.graphics();s.fillStyle(16729344,.8),s.fillCircle(0,0,30),s.setPosition(t,e),this.scene.tweens.add({targets:s,scaleX:2.5,scaleY:2.5,alpha:0,duration:600,onComplete:()=>s.destroy()}),this.createExplosiveParticles(t,e),this.createSmokeParticles(t,e)}createExplosiveParticles(t,e){for(let s=0;s<20;s++){const i=this.scene.add.graphics(),a=2*Math.PI*s/20,n=30+40*Math.random(),r=t+Math.cos(a)*n,l=e+Math.sin(a)*n;i.fillStyle(16729344,1),i.fillCircle(0,0,3+3*Math.random()),i.setPosition(r,l);const h=a+(Math.random()-.5)*Math.PI/2,o=40+60*Math.random(),c=t+Math.cos(h)*o,g=e+Math.sin(h)*o;this.scene.tweens.add({targets:i,x:c,y:g,alpha:0,scaleX:.5,scaleY:.5,duration:600+400*Math.random(),ease:"Power2",onComplete:()=>i.destroy()})}}createSmokeParticles(t,e){for(let s=0;s<12;s++){const s=this.scene.add.graphics(),i=Math.random()*Math.PI*2,a=15+25*Math.random(),n=t+Math.cos(i)*a,r=e+Math.sin(i)*a;s.fillStyle(6908265,.6),s.fillCircle(0,0,4+4*Math.random()),s.setPosition(n,r);const l=i+(Math.random()-.5)*Math.PI/3,h=30+50*Math.random(),o=t+Math.cos(l)*h,c=e+Math.sin(l)*h;this.scene.tweens.add({targets:s,x:o,y:c,alpha:0,scaleX:2,scaleY:2,duration:1e3+600*Math.random(),ease:"Power2",onComplete:()=>s.destroy()})}}}class w{constructor(t){e(this,"scene"),this.scene=t}create(t,e){const s=this.scene.add.circle(t,e,40,255,.3);this.scene.tweens.add({targets:s,scaleX:1.5,scaleY:1.5,alpha:0,duration:1e3,onComplete:()=>s.destroy()})}}class A{constructor(t){e(this,"scene"),this.scene=t}create(t,e){this.createHealGlow(t,e)}createHealGlow(t,e){const s=this.scene.add.graphics();s.fillStyle(65382,.6),s.fillCircle(0,0,35),s.setPosition(t,e);const i=this.scene.add.graphics();i.fillStyle(65382,.4),i.fillCircle(0,0,25),i.setPosition(t,e);const a=this.scene.add.graphics();a.fillStyle(65382,.3),a.fillCircle(0,0,45),a.setPosition(t,e),this.scene.tweens.add({targets:[s,i,a],scaleX:1.2,scaleY:1.2,alpha:0,duration:1e3,ease:"Power2",onComplete:()=>{s.destroy(),i.destroy(),a.destroy()}}),this.createHealParticles(t,e)}createHealParticles(t,e){for(let s=0;s<6;s++){const i=this.scene.add.graphics(),a=2*Math.PI*s/6,n=t+15*Math.cos(a),r=e+15*Math.sin(a);i.fillStyle(65382,.8),i.fillCircle(0,0,2+2*Math.random()),i.setPosition(n,r);const l=n+25*Math.cos(a),h=r+25*Math.sin(a);this.scene.tweens.add({targets:i,x:l,y:h,alpha:0,scaleX:.5,scaleY:.5,duration:600+200*Math.random(),ease:"Power2",onComplete:()=>i.destroy()})}}}class R{constructor(t){e(this,"scene"),e(this,"effects"),this.scene=t,this.effects=new Map,this.initializeEffects()}initializeEffects(){this.effects.set("fireball",new S(this.scene)),this.effects.set("lightning",new k(this.scene)),this.effects.set("ice_spike",new C(this.scene)),this.effects.set("meteor",new T(this.scene)),this.effects.set("shield",new w(this.scene)),this.effects.set("heal",new A(this.scene))}createEffect(t,e,s,i,a){const n=this.effects.get(t);n?n instanceof y?n.create(e,s,i,a):(n instanceof w||n instanceof A)&&n.create(e,s):console.warn(`Effect type '${t}' not found`)}registerEffect(t,e){this.effects.set(t,e)}}class I{constructor(t,s,i,a,n,r,l){e(this,"sprite"),e(this,"scene"),e(this,"name"),e(this,"idleAnimationKey"),this.scene=t,this.name=r,this.idleAnimationKey=l,this.sprite=t.add.sprite(s,i,a,n),this.createNameLabel()}createNameLabel(){const t=this.sprite.y+50;this.scene.add.text(this.sprite.x,t,this.name,{fontSize:"16px",color:"#ffffff"}).setOrigin(.5)}playAnimation(t){this.sprite.play(t)}playIdleAnimation(){this.sprite.play(this.idleAnimationKey)}onAnimationComplete(t){this.sprite.once("animationcomplete",t)}getPosition(){return{x:this.sprite.x,y:this.sprite.y}}destroy(){this.sprite.destroy()}}class M{constructor(t,s,i,a=p.UI.HEALTH_BAR.width,n=p.UI.HEALTH_BAR.height){e(this,"background"),e(this,"fill"),e(this,"scene"),e(this,"x"),e(this,"y"),e(this,"width"),e(this,"height"),this.scene=t,this.x=s,this.y=i,this.width=a,this.height=n,this.background=t.add.rectangle(s,i,a,n,3355443),this.fill=t.add.rectangle(s,i,a,n,65280)}updateHealth(t){this.fill.width=this.width*Math.max(0,Math.min(1,t))}setFillColor(t){this.fill.fillColor=t}destroy(){this.background.destroy(),this.fill.destroy()}}class P{constructor(t){e(this,"scene"),e(this,"graphics"),e(this,"activeRings",new Map),e(this,"baseRadius",p.UI.CASTING_RING.radius),e(this,"thickness",p.UI.CASTING_RING.thickness),e(this,"ringSpacing",25),this.scene=t,this.graphics=t.add.graphics().setDepth(100).setVisible(!0)}startCasting(t,e,s,i){const a={skillName:t,animationType:e,x:s,y:i,progress:0,radius:this.calculateRingRadius(t),isVisible:!0};this.activeRings.set(t,a),this.updateAllRings()}updateProgress(t,e,s,i){const a=this.activeRings.get(t);a?(a.progress=Math.min(e,1),a.x=s,a.y=i,this.updateAllRings()):this.stopCasting(t)}stopCasting(t){this.activeRings.has(t)&&(this.activeRings.delete(t),this.recalculateRingRadii(),this.updateAllRings())}stopAllCasting(){this.activeRings.clear(),this.updateAllRings()}forceCleanup(){this.activeRings.clear(),this.graphics.clear()}getActiveRingNames(){return Array.from(this.activeRings.keys())}getActiveRingCount(){return this.activeRings.size}debugState(){console.log("MultiCastingRing state:",{activeRings:Array.from(this.activeRings.keys()),ringCount:this.activeRings.size})}calculateRingRadius(t){const e=this.activeRings.size;return this.baseRadius+e*this.ringSpacing}recalculateRingRadii(){Array.from(this.activeRings.keys()).forEach(((t,e)=>{const s=this.activeRings.get(t);s&&(s.radius=this.baseRadius+e*this.ringSpacing)}))}updateAllRings(){if(this.graphics.clear(),0!==this.activeRings.size)for(const[t,e]of this.activeRings)this.drawRing(e)}drawRing(t){if(!t.isVisible)return;const e=this.getRingColor(t.animationType),s=this.getRingAlpha(t.progress),i=this.getRingIndex(t.skillName),a=s*(1-.1*i),n=this.thickness+1*i;this.addGlowEffect(t,e,a,n),this.graphics.lineStyle(n,e,a),this.graphics.beginPath(),this.graphics.arc(t.x,t.y,t.radius,-Math.PI/2,-Math.PI/2+2*Math.PI*t.progress,!1),this.graphics.strokePath()}getRingColor(t){return{fireball:16737792,lightning:65535,ice_spike:52479,meteor:16724736,shield:26367,heal:65382}[t]||16777215}getRingAlpha(t){return p.UI.CASTING_RING.baseAlpha+t*p.UI.CASTING_RING.progressAlphaMultiplier}getRingIndex(t){return Array.from(this.activeRings.keys()).indexOf(t)}addGlowEffect(t,e,s,i){const a=t.radius,n=s*p.UI.CASTING_RING.glowAlphaMultiplier;this.graphics.lineStyle(i+p.UI.CASTING_RING.glowOffset,e,n),this.graphics.beginPath(),this.graphics.arc(t.x,t.y,a,-Math.PI/2,-Math.PI/2+2*Math.PI*t.progress,!1),this.graphics.strokePath()}destroy(){this.graphics&&(this.graphics.destroy(),this.graphics=null),this.activeRings.clear()}}class L{constructor(t,s,i){e(this,"button"),e(this,"scene"),this.scene=t,this.button=t.add.text(s,i,"BACK",{fontSize:"20px",color:"#ffffff",backgroundColor:"#666666",padding:{x:10,y:5}}).setOrigin(.5).setInteractive(),this.setupEventHandlers()}setupEventHandlers(){this.button.on("pointerdown",(()=>{this.scene.events.emit("backButtonClicked")}))}destroy(){this.button.destroy()}}class E{constructor(t,s,i,a,r,l){e(this,"scene"),e(this,"skill"),e(this,"radius"),e(this,"baseButton"),e(this,"cooldownButton"),e(this,"mask"),e(this,"text"),e(this,"icon"),e(this,"flash"),e(this,"progressRing"),e(this,"previousCooldown",0),e(this,"inputManager"),e(this,"gameLogic"),e(this,"isPressed",!1),e(this,"pressStartTime",0),this.scene=t,this.skill=a,this.radius=p.UI.SKILL_BUTTON.radius,this.inputManager=r,this.gameLogic=l,this.baseButton=t.add.circle(s,i,this.radius,4473924).setInteractive().setDepth(0),this.cooldownButton=t.add.circle(s,i,this.radius,6710886).setDepth(1),this.mask=t.add.graphics().setVisible(!1),this.mask.x=s,this.mask.y=i,this.cooldownButton.mask=new n.Display.Masks.BitmapMask(t,this.mask),this.progressRing=t.add.graphics().setDepth(2).setVisible(!1);const h=this.getIconKey(a.animationType);this.icon=t.add.image(s,i-8,h).setScale(.6).setDepth(3),this.text=t.add.text(s,i+12,a.name,{fontSize:"10px",color:"#ffffff",align:"center"}).setOrigin(.5).setDepth(3),this.flash=t.add.circle(s,i,this.radius,16777215).setAlpha(0).setDepth(4),this.setupEventHandlers()}getIconKey(t){return{fireball:"fireball",lightning:"lightning",ice_spike:"ice_spike",meteor:"meteor",shield:"shield",heal:"heal"}[t]||"fireball"}setupEventHandlers(){this.baseButton.on("pointerdown",(()=>{this.handlePointerDown()})),this.baseButton.on("pointerup",(()=>{this.handlePointerUp()})),this.baseButton.on("pointerout",(()=>{this.handlePointerOut()}))}handlePointerDown(){this.skill.canStartCasting()&&(this.isPressed=!0,this.pressStartTime=Date.now(),this.baseButton.setFillStyle(6710886),this.progressRing.setVisible(!0),this.scene.tweens.add({targets:[this.baseButton,this.icon,this.text],scaleX:p.UI.SKILL_BUTTON.scaleOnPress,scaleY:p.UI.SKILL_BUTTON.scaleOnPress,duration:p.UI.SKILL_BUTTON.pressAnimationDuration,ease:"Power2"}),this.inputManager.handleMouseSkillStart(this.skill))}handlePointerUp(){this.isPressed&&this.inputManager.handleMouseSkillComplete(this.skill),this.isPressed=!1,this.baseButton.setFillStyle(4473924),this.progressRing.setVisible(!1),this.scene.tweens.add({targets:[this.baseButton,this.icon,this.text],scaleX:1,scaleY:1,duration:p.UI.SKILL_BUTTON.pressAnimationDuration,ease:"Power2"})}handlePointerOut(){this.isPressed=!1,this.baseButton.setFillStyle(4473924),this.progressRing.setVisible(!1),this.inputManager.handleMouseSkillCancel(),this.scene.tweens.add({targets:[this.baseButton,this.icon,this.text],scaleX:1,scaleY:1,duration:p.UI.SKILL_BUTTON.pressAnimationDuration,ease:"Power2"})}update(){if(!(this.text&&this.text.active&&this.icon&&this.icon.active))return;const t=this.skill.getCooldownPercentage(),e=this.gameLogic.getCastingProgress(this.skill);this.mask.clear(),t>0?(this.mask.fillStyle(0,1),this.mask.beginPath(),this.mask.slice(0,0,this.radius,-Math.PI/2,-Math.PI/2-2*Math.PI*t,!1),this.mask.fillPath(),this.text.setColor("#888888"),this.icon.setAlpha(.5)):(this.text.setColor("#ffffff"),this.icon.setAlpha(1)),this.gameLogic.isCasting(this.skill)?(this.progressRing.setVisible(!0),this.progressRing.clear(),this.progressRing.lineStyle(p.UI.SKILL_BUTTON.progressRingThickness,p.UI.SKILL_BUTTON.progressRingColor,1),this.progressRing.beginPath(),this.progressRing.arc(this.baseButton.x,this.baseButton.y,this.radius+p.UI.SKILL_BUTTON.progressRingOffset,-Math.PI/2,-Math.PI/2+2*Math.PI*e,!1),this.progressRing.strokePath()):(this.progressRing.setVisible(!1),this.progressRing.clear()),0===t&&this.previousCooldown>0&&this.scene.tweens.add({targets:this.flash,alpha:{from:.8,to:0},duration:p.UI.SKILL_BUTTON.flashAnimationDuration,ease:"Power2"}),this.previousCooldown=t}destroy(){this.baseButton&&(this.baseButton.destroy(),this.baseButton=null),this.cooldownButton&&(this.cooldownButton.destroy(),this.cooldownButton=null),this.mask&&(this.mask.destroy(),this.mask=null),this.text&&(this.text.destroy(),this.text=null),this.icon&&(this.icon.destroy(),this.icon=null),this.flash&&(this.flash.destroy(),this.flash=null),this.progressRing&&(this.progressRing.destroy(),this.progressRing=null)}}class b{constructor(t,s,i){e(this,"scene"),e(this,"gameLogic"),e(this,"skillButtons"),e(this,"inputManager"),this.scene=t,this.gameLogic=s,this.inputManager=i,this.skillButtons=[]}createSkillButtons(){const t=this.gameLogic.getSkills(),e=p.UI.SKILL_BUTTON_LAYOUT;this.createLeftSideButtons(t.slice(0,3),e,800),this.createRightSideButtons(t.slice(3,6),e,400,800)}createLeftSideButtons(t,e,s){const i=e.screenPadding,a=s-e.screenPadding;for(let n=0;n<t.length;n++){const s=e.leftStartAngle+e.skillSpacing*(n-1),r=i+Math.cos(s)*e.circleRadius,l=a+Math.sin(s)*e.circleRadius;this.skillButtons.push(new E(this.scene,r,l,t[n],this.inputManager,this.gameLogic))}}createRightSideButtons(t,e,s,i){const a=s-e.screenPadding,n=i-e.screenPadding;for(let r=0;r<t.length;r++){const s=e.rightStartAngle+e.skillSpacing*(r-1),i=a+Math.cos(s)*e.circleRadius,l=n+Math.sin(s)*e.circleRadius;this.skillButtons.push(new E(this.scene,i,l,t[r],this.inputManager,this.gameLogic))}}update(){this.skillButtons.forEach((t=>t.update()))}destroy(){this.skillButtons.forEach((t=>t.destroy())),this.skillButtons=[]}}class x{constructor(t){e(this,"scene"),e(this,"displayText",null),this.scene=t}showWinMessage(){this.displayText=this.scene.add.text(200,400,"YOU WIN!",{fontSize:"48px",color:"#00ff00"}).setOrigin(.5)}showLoseMessage(){this.displayText=this.scene.add.text(200,400,"YOU LOSE!",{fontSize:"48px",color:"#ff0000"}).setOrigin(.5)}hide(){this.displayText&&(this.displayText.destroy(),this.displayText=null)}destroy(){this.hide()}}class B{constructor(t,s){e(this,"scene"),e(this,"gameLogic"),e(this,"pressedKeys",new Set),e(this,"keyPressStartTimes",new Map),e(this,"skillKeyBindings",new Map),this.scene=t,this.gameLogic=s,this.initializeSkillKeyBindings()}initializeSkillKeyBindings(){this.gameLogic.getSkills().forEach((t=>{this.skillKeyBindings.set(t.keyBinding.toLowerCase(),t)}))}setupInput(){this.setupKeyboardInput()}setupKeyboardInput(){var t,e;null==(t=this.scene.input.keyboard)||t.on("keydown",(t=>{const e=t.key.toLowerCase();this.handleKeyDown(e)})),null==(e=this.scene.input.keyboard)||e.on("keyup",(t=>{const e=t.key.toLowerCase();this.handleKeyUp(e)}))}handleKeyDown(t){if(!this.pressedKeys.has(t)){this.pressedKeys.add(t),this.keyPressStartTimes.set(t,Date.now());const e=this.skillKeyBindings.get(t);if(e&&e.canStartCasting()){const t=this.gameLogic.getSkills().indexOf(e);this.gameLogic.startCastingSkill(t)}}}handleKeyUp(t){if(this.pressedKeys.has(t)){const e=this.skillKeyBindings.get(t);if(e&&this.gameLogic.isCasting(e)){const t=this.gameLogic.getSkills().indexOf(e);this.gameLogic.completeCastingOnRelease(t)}this.pressedKeys.delete(t),this.keyPressStartTimes.delete(t)}}handleMouseSkillStart(t){if(t.canStartCasting()){const e=this.gameLogic.getSkills().indexOf(t);this.gameLogic.startCastingSkill(e)}}handleMouseSkillComplete(t){if(this.gameLogic.isCasting(t)){const e=this.gameLogic.getSkills().indexOf(t);this.gameLogic.completeCastingOnRelease(e)}}handleMouseSkillCancel(){this.gameLogic.cancelCurrentCast()}destroy(){var t,e;null==(t=this.scene.input.keyboard)||t.off("keydown"),null==(e=this.scene.input.keyboard)||e.off("keyup"),this.pressedKeys.clear(),this.keyPressStartTimes.clear(),this.skillKeyBindings.clear()}}class O{constructor(t,s,i,a){e(this,"gameLogic"),e(this,"effectFactory"),e(this,"playerFighter"),e(this,"opponentFighter"),e(this,"activeAnimations",new Map),e(this,"animationQueue",[]),this.gameLogic=t,this.effectFactory=s,this.playerFighter=i,this.opponentFighter=a}playSkillAnimation(t){const e=`wizard_${t.animationType}`;if(this.activeAnimations.has(t.name))return void this.animationQueue.push(t);const s={skill:t,animationKey:e,isPlaying:!0,startTime:Date.now()};this.activeAnimations.set(t.name,s),this.playerFighter.playAnimation(e),this.playerFighter.onAnimationComplete((()=>{this.completeAnimation(t.name)})),this.createProjectileEffect(t.animationType)}completeAnimation(t){if(this.activeAnimations.delete(t),this.animationQueue.length>0){const t=this.animationQueue.shift();this.playSkillAnimation(t)}else this.playerFighter.playIdleAnimation()}createProjectileEffect(t){const e=this.playerFighter.getPosition(),s=this.opponentFighter.getPosition();this.effectFactory.createEffect(t,e.x,e.y,s.x,s.y)}handleSkillAnimations(){const t=this.gameLogic.getLastUsedSkill();t&&(this.playSkillAnimation(t),this.gameLogic.clearLastUsedSkill())}isAnimationPlaying(){return this.activeAnimations.size>0||this.animationQueue.length>0}getActiveAnimationCount(){return this.activeAnimations.size+this.animationQueue.length}clearAllAnimations(){this.activeAnimations.clear(),this.animationQueue=[],this.playerFighter.playIdleAnimation()}}class _ extends a.Scene{constructor(){super("FightScene"),e(this,"gameLogic"),e(this,"effectFactory"),e(this,"playerFighter"),e(this,"opponentFighter"),e(this,"playerHealthBar"),e(this,"opponentHealthBar"),e(this,"multiCastingRing"),e(this,"backButton"),e(this,"skillButtonManager"),e(this,"gameOverDisplay"),e(this,"inputManager"),e(this,"multiSkillAnimationSystem"),e(this,"gameOverTimer",null),this.gameLogic=new f}create(){this.cameras.main.setBackgroundColor(0),this.gameLogic.reset(),this.initializeComponents(),this.setupEventHandlers(),this.startIdleAnimations(),this.multiCastingRing.forceCleanup()}initializeComponents(){this.effectFactory=new R(this),this.playerFighter=new I(this,200,600,"wizard_spellcast",0,"Player","wizard_combat_idle"),this.opponentFighter=new I(this,200,200,"orc_combat_idle",5,"Opponent","orc_combat_idle"),this.playerHealthBar=new M(this,200,680,200,20),this.playerHealthBar.setFillColor(p.UI.HEALTH_BAR.playerColor),this.opponentHealthBar=new M(this,200,120,200,20),this.opponentHealthBar.setFillColor(p.UI.HEALTH_BAR.opponentColor),this.multiCastingRing=new P(this),this.backButton=new L(this,350,50),this.inputManager=new B(this,this.gameLogic),this.inputManager.setupInput(),this.skillButtonManager=new b(this,this.gameLogic,this.inputManager),this.skillButtonManager.createSkillButtons(),this.gameOverDisplay=new x(this),this.multiSkillAnimationSystem=new O(this.gameLogic,this.effectFactory,this.playerFighter,this.opponentFighter)}setupEventHandlers(){this.events.on("backButtonClicked",(()=>{this.cleanup(),this.scene.start("Game")}))}startIdleAnimations(){this.playerFighter.playIdleAnimation(),this.opponentFighter.playIdleAnimation()}update(t,e){this.gameLogic.update(e),this.updateHealthBars(),this.updateMultiCastingRing(),this.skillButtonManager.update(),this.checkGameState(),this.multiSkillAnimationSystem.handleSkillAnimations(),this.ensureRingCleanup()}updateHealthBars(){const t=this.gameLogic.getPlayer().getHealthPercentage(),e=this.gameLogic.getOpponent().getHealthPercentage();this.playerHealthBar.updateHealth(t),this.opponentHealthBar.updateHealth(e)}updateMultiCastingRing(){const t=this.gameLogic.getCastingSpells(),e=this.playerFighter.getPosition(),s=new Set;for(const i of t){const t=i.skill.name;s.add(t);const a=i.progress;0===a?this.multiCastingRing.startCasting(t,i.skill.animationType,e.x,e.y):this.multiCastingRing.updateProgress(t,a,e.x,e.y)}this.cleanupCompletedRings(s)}cleanupCompletedRings(t){const e=this.multiCastingRing.getActiveRingNames();for(const s of e)t.has(s)||this.multiCastingRing.stopCasting(s);e.length>0&&0===t.size&&this.multiCastingRing.forceCleanup()}checkGameState(){this.gameLogic.getGameState()===p.GAME_STATES.GAME_OVER&&(this.gameOverDisplay.showWinMessage(),this.gameOverTimer||(this.gameOverTimer=setTimeout((()=>{this.cleanup(),this.gameLogic.reset(),this.scene.start("Game")}),2e3)))}cleanup(){this.gameOverTimer&&(clearTimeout(this.gameOverTimer),this.gameOverTimer=null),this.skillButtonManager.destroy(),this.gameOverDisplay.destroy(),this.inputManager.destroy(),this.playerFighter.destroy(),this.opponentFighter.destroy(),this.playerHealthBar.destroy(),this.opponentHealthBar.destroy(),this.multiCastingRing.stopAllCasting(),this.multiCastingRing.destroy(),this.backButton.destroy()}shutdown(){this.cleanup()}ensureRingCleanup(){const t=this.gameLogic.getCastingSpells(),e=this.multiCastingRing.getActiveRingCount();0===t.length&&e>0&&this.multiCastingRing.forceCleanup()}}const v={type:a.AUTO,width:400,height:800,parent:"game-container",backgroundColor:"#028af8",scale:{mode:Phaser.Scale.FIT,autoCenter:Phaser.Scale.CENTER_BOTH,min:{width:400,height:800},max:{width:400,height:800}},scene:[r,g,o,l,_,h]};document.addEventListener("DOMContentLoaded",(()=>{new a.Game({...v,parent:"game-container"})}));
